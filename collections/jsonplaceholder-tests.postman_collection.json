{
	"info": {
		"_postman_id": "jsonplaceholder-tests-collection",
		"name": "JSONPlaceholder Tests",
		"description": "Coleção de testes organizados para validar endpoints da API JSONPlaceholder\n\n## Objetivo\nDemonstrar domínio em validação de contratos, organização de testes automatizados e boas práticas para versionamento e colaboração.\n\n## Estrutura\n- **Posts**: Testes para operações CRUD de posts\n- **Comments**: Validação de comentários e relacionamentos\n- **Users**: Testes de usuários e seus dados\n- **Albums**: Validação de álbuns e fotos\n- **Todos**: Testes de tarefas\n\n## Variáveis de Ambiente\n- `base_url`: URL base da API (https://jsonplaceholder.typicode.com)\n- `default_user_id`: ID padrão do usuário para testes\n- `default_post_id`: ID padrão do post para testes\n\n## Validações Implementadas\n- Status codes\n- Campos obrigatórios\n- Tempo de resposta\n- Validação de schema usando tv4",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Posts",
			"description": "Testes para endpoints de posts - operações CRUD completas",
			"item": [
				{
					"name": "GET All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validações básicas",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validações de estrutura",
									"pm.test(\"Response is an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Array has 100 posts\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(100);",
									"});",
									"",
									"// Validação de schema",
									"pm.test(\"Posts have required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstPost = jsonData[0];",
									"    ",
									"    pm.expect(firstPost).to.have.property('id');",
									"    pm.expect(firstPost).to.have.property('userId');",
									"    pm.expect(firstPost).to.have.property('title');",
									"    pm.expect(firstPost).to.have.property('body');",
									"});",
									"",
									"// Schema validation usando tv4",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": {\"type\": \"number\"},",
									"            \"userId\": {\"type\": \"number\"},",
									"            \"title\": {\"type\": \"string\"},",
									"            \"body\": {\"type\": \"string\"}",
									"        },",
									"        \"required\": [\"id\", \"userId\", \"title\", \"body\"]",
									"    }",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"// Salvar dados para próximos testes",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"default_post_id\", jsonData[0].id);",
									"    pm.environment.set(\"default_user_id\", jsonData[0].userId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					}
				},
				{
					"name": "GET Single Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Post has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('userId');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('body');",
									"});",
									"",
									"pm.test(\"Post ID matches request\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Title and body are not empty\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.not.be.empty;",
									"    pm.expect(jsonData.body).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					}
				},
				{
					"name": "POST Create Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains created post\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('body');",
									"    pm.expect(jsonData).to.have.property('userId');",
									"});",
									"",
									"pm.test(\"Created post has correct data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.eql(\"Test Post\");",
									"    pm.expect(jsonData.body).to.eql(\"This is a test post body\");",
									"    pm.expect(jsonData.userId).to.eql(1);",
									"});",
									"",
									"pm.test(\"New post gets an ID\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"    pm.expect(jsonData.id).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Post\",\n    \"body\": \"This is a test post body\",\n    \"userId\": 1\n}"
						},
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					}
				},
				{
					"name": "PUT Update Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Updated post has correct data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.eql(\"Updated Test Post\");",
									"    pm.expect(jsonData.body).to.eql(\"This is an updated test post body\");",
									"    pm.expect(jsonData.userId).to.eql(1);",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"title\": \"Updated Test Post\",\n    \"body\": \"This is an updated test post body\",\n    \"userId\": 1\n}"
						},
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					}
				},
				{
					"name": "DELETE Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					}
				}
			]
		},
		{
			"name": "Comments",
			"description": "Testes para endpoints de comentários e relacionamentos com posts",
			"item": [
				{
					"name": "GET All Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Comments have required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstComment = jsonData[0];",
									"    ",
									"    pm.expect(firstComment).to.have.property('id');",
									"    pm.expect(firstComment).to.have.property('postId');",
									"    pm.expect(firstComment).to.have.property('name');",
									"    pm.expect(firstComment).to.have.property('email');",
									"    pm.expect(firstComment).to.have.property('body');",
									"});",
									"",
									"pm.test(\"Email format is valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstComment = jsonData[0];",
									"    pm.expect(firstComment.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					}
				},
				{
					"name": "GET Comments by Post ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All comments belong to the post\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(comment => {",
									"        pm.expect(comment.postId).to.eql(1);",
									"    });",
									"});",
									"",
									"pm.test(\"Comments array is not empty\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1",
								"comments"
							]
						}
					}
				}
			]
		},
		{
			"name": "Users",
			"description": "Testes para endpoints de usuários e validação de dados pessoais",
			"item": [
				{
					"name": "GET All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of 10 users\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData).to.have.lengthOf(10);",
									"});",
									"",
									"pm.test(\"Users have required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstUser = jsonData[0];",
									"    ",
									"    pm.expect(firstUser).to.have.property('id');",
									"    pm.expect(firstUser).to.have.property('name');",
									"    pm.expect(firstUser).to.have.property('username');",
									"    pm.expect(firstUser).to.have.property('email');",
									"    pm.expect(firstUser).to.have.property('address');",
									"    pm.expect(firstUser).to.have.property('phone');",
									"    pm.expect(firstUser).to.have.property('website');",
									"    pm.expect(firstUser).to.have.property('company');",
									"});",
									"",
									"pm.test(\"User address has required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstUser = jsonData[0];",
									"    ",
									"    pm.expect(firstUser.address).to.have.property('street');",
									"    pm.expect(firstUser.address).to.have.property('suite');",
									"    pm.expect(firstUser.address).to.have.property('city');",
									"    pm.expect(firstUser.address).to.have.property('zipcode');",
									"    pm.expect(firstUser.address).to.have.property('geo');",
									"});",
									"",
									"pm.test(\"Email format is valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(user => {",
									"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					}
				},
				{
					"name": "GET Single User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User ID matches request\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"User has complete profile\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.not.be.empty;",
									"    pm.expect(jsonData.username).to.not.be.empty;",
									"    pm.expect(jsonData.email).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					}
				},
				{
					"name": "GET User Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All posts belong to the user\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(post => {",
									"        pm.expect(post.userId).to.eql(1);",
									"    });",
									"});",
									"",
									"pm.test(\"User has posts\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"posts"
							]
						}
					}
				}
			]
		},
		{
			"name": "Albums",
			"description": "Testes para endpoints de álbuns e fotos",
			"item": [
				{
					"name": "GET All Albums",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData).to.have.lengthOf(100);",
									"});",
									"",
									"pm.test(\"Albums have required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstAlbum = jsonData[0];",
									"    ",
									"    pm.expect(firstAlbum).to.have.property('id');",
									"    pm.expect(firstAlbum).to.have.property('userId');",
									"    pm.expect(firstAlbum).to.have.property('title');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/albums",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"albums"
							]
						}
					}
				},
				{
					"name": "GET Album Photos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All photos belong to the album\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(photo => {",
									"        pm.expect(photo.albumId).to.eql(1);",
									"    });",
									"});",
									"",
									"pm.test(\"Photos have required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstPhoto = jsonData[0];",
									"    ",
									"    pm.expect(firstPhoto).to.have.property('id');",
									"    pm.expect(firstPhoto).to.have.property('albumId');",
									"    pm.expect(firstPhoto).to.have.property('title');",
									"    pm.expect(firstPhoto).to.have.property('url');",
									"    pm.expect(firstPhoto).to.have.property('thumbnailUrl');",
									"});",
									"",
									"pm.test(\"Photo URLs are valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstPhoto = jsonData[0];",
									"    ",
									"    pm.expect(firstPhoto.url).to.match(/^https?:\\/\\/.+/);",
									"    pm.expect(firstPhoto.thumbnailUrl).to.match(/^https?:\\/\\/.+/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/albums/1/photos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"albums",
								"1",
								"photos"
							]
						}
					}
				}
			]
		},
		{
			"name": "Todos",
			"description": "Testes para endpoints de tarefas (todos)",
			"item": [
				{
					"name": "GET All Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData).to.have.lengthOf(200);",
									"});",
									"",
									"pm.test(\"Todos have required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    const firstTodo = jsonData[0];",
									"    ",
									"    pm.expect(firstTodo).to.have.property('id');",
									"    pm.expect(firstTodo).to.have.property('userId');",
									"    pm.expect(firstTodo).to.have.property('title');",
									"    pm.expect(firstTodo).to.have.property('completed');",
									"});",
									"",
									"pm.test(\"Completed field is boolean\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(todo => {",
									"        pm.expect(todo.completed).to.be.a('boolean');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"todos"
							]
						}
					}
				},
				{
					"name": "GET User Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All todos belong to the user\", function () {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(todo => {",
									"        pm.expect(todo.userId).to.eql(1);",
									"    });",
									"});",
									"",
									"pm.test(\"User has todos\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1",
								"todos"
							]
						}
					}
				}
			]
		},
		{
			"name": "Error Handling",
			"description": "Testes para validar comportamento de erro da API",
			"item": [
				{
					"name": "GET Non-existent Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body is empty object\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(Object.keys(jsonData)).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"999"
							]
						}
					}
				},
				{
					"name": "GET Invalid Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/invalid-endpoint",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"invalid-endpoint"
							]
						}
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://jsonplaceholder.typicode.com"
		}
	]
}